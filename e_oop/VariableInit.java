package e_oop;

public class VariableInit {
	
	/* 변수 초기화 방법 3가지 */
	
	//1. 명시적 초기화
	int var = 10;
	//변수를 선언함과 동시에 = 연산자를 이용해 값을 대입
	static int classVar = 20;
	
	//2. 초기화 블럭
	{
		var = 30;
	}
	// 아무것도 없이 이렇게 블럭을 열면 초기화 한다는 뜻
	
	static {
		classVar = 40;
	}
	// static 변수 초기화 가능
	
	
	//3. 생성자 **중요
	/*
	 * - 클래스와 같은 이름의 메서드
	 * - 사용 이유 : 인스턴스 변수를 초기화하기 위해 사용한다
	 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다
	 * - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다
	 * - 생성자는 메서드지만, 리턴 타입이 없다
	 * 
	 * 소괄호가 붙었다 -> 무조건 메서드
	 * 
	 */
	
	// 생성자 생성 : 클래스이름(){}
	VariableInit(){
		var = 50;
	}
	
	//명시적 초기화를 하면 값만 넣고 로직은 넣을 수는 없음
	//로직을 넣으려면 생성자나 초기화블럭을 사용할 수밖에 없음
	//생성자 뒤의 괄호 () => 초기화를 하고 싶은데 파라미터가 필요하면 생성자를 사용
	
	//생성자 사용 이유
	//1. 초기화에 여러줄의 코드가 필요할 때
	//2. 초기화에 파라미터가  필요할 때
	
	public static void main(String[] args) {
		Init i = new Init();
		i.a = 10;
		i.b = 20;
		i.c = 30;
		System.out.println(i.a);
		System.out.println(i.b);
		System.out.println(i.c);
		
		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		System.out.println(i2.a);
		System.out.println(i2.b);
		System.out.println(i2.c);
		
		Init i3 = new Init(70, 80, 90); //파라미터를 사용해서 초기화 할 때 생성자가 사용된다
		
		
	}
	
}

class Init{
	int a;
	int b;
	int c;
	
	//생성자를 만들어서 파라미터를 받아보자
	Init(int a, int b, int c){
		this.a = a;
		this.b = b;
		this.c = c;
		//this : 인스턴스 변수와 지역변수의 이름이 같을 때 
		//       둘을 구분하기 위해 사용, 인스턴스 변수 앞에 this를 붙인다
		//this : 여기 클래스의 객체의 주소
	}
	
	//생성자 : 클래스와 같은 이름을 가지고 있다
	Init(){
//		a = 10;
//		b = 20;
//		c = 30; // 이렇게 초기화 하지 않음
		
		this(10, 20, 30); //생성자의 첫 줄에서만 사용할 수 있다.
		//this() : 생성자에서 다른 생성자를 호출할 때 사용한다.
		//파라미터를 3개로 하는 생성자를 찾는다 -> 로직을 반복해서 작성하지 않기 위해 사용
		//파라미터를 3개로 하는 생성자가 또 있으면? 자료형을 비교해서 찾아가기 
	}
	// 똑같은 이름의 메서드가 지금 2개 존재
	// => 메서드는 똑같은 이름의 메서드가 존재할 수 있다.
	// <오버로딩> : 같은 이름의 메서드를 여러 개 정의하는 것
	// 구분 -> 파라미터의 개수 또는 타입의 차이로 구분
	
	//생성자를 왜 또 만들까?
	//변수들의 값 초기화를 하는데 초기화는 클래스 내부에서도 가능, 외부에서도 가능
	//외부에서 사용할 때 나는 특별히 이 값으로 하고 싶어
	//필요에 따라 바꾸고 싶은 변수가 다르므로 생성자를 여러개 생성한다
}
