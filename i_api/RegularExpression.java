package i_api;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegularExpression {

	public static void main(String[] args) {
		/*
		 * 정규표현식 : 문자열의 패턴을 검사하는 표현식
		 * 
		 * ^캐럿	뒷 문자로 시작
		 * $	앞 문자로 종료
		 * .	임의의 문자(줄바꿈 제외)
		 * *	앞 문자가 0개 이상
		 * +	앞 문자가 1개 이상
		 * ?	앞 문자가 없거나 1개
		 * []	문자의 집합이나 범위([a-z] : a부터 z까지, [^a-z] : a부터 z가 아닌 것) ^캐럿, 여기서 부정의 역할
		 * 								ㄴ 예시로 알파벳을 넣었고, 숫자를 넣을 수도 있다. [0-9] 
		 * {}	앞 문자의 개수({2} : 2개, {2,4} : 2개 이상 4개 이하)
		 * 								ㄴ 사이에 띄어쓰기가 있으면 안 된다. 정규표현식에서는 띄어쓰기 하나도 조심
		 * ()	그룹화(1개의 문자처럼 인식)
		 * |	OR 연산
		 * \s	공백, 탭, 줄바꿈
		 * \S	공백, 탭, 줄바꿈이 아닌 문자
		 * \w	알파벳이나 숫자
		 * \W	알파벳이나 숫자가 아닌 문자
		 * \d	숫자
		 * \D	숫자가 아닌 문자
		 * (?i)	뒷 문자의 대소문자 구분 안함
		 * \	정규표현식에서 사용되는 특수문자 표현, \를 출력하기 위해, \앞에 \가 필요한 개념
		 *
		 * 
		 * 정규표현식 - 회원 가입할 때 주로 사용, 
		 * 			  문자열 패턴을 검사해서 그 패턴이 요구되는 조건과 일치하는지 일치하지 않는지를 확인
		 * 정규표현식 엄청 많다, 이것만으로 책 한 권이 있을 정도로
		 * 여기서는 자주 쓰이는 간단한 정규표현식만 배울 것
		 */
		
		String str = "abc123";
		//String regex = "abc123";
		//String regex = "[a-z]{3}[0-9]{1,3}";
		//String regex = "[a-z0-9]+"; //[a-z0-9] : 해당 범위의 여러 개 중에 1개, 특수문자가 포함되지 않으면 다 통과시킬 수 있겠죠.
		//String regex = "\\w*";	  //\w : 알파벳이나 숫자가 0개 이상 온다
		//String regex = ".*";		  //줄바꿈을 제외한, 어떠한 문자 조합도 통과시키는 정규표현식
		
		
		//문자열 검사
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(str);
		System.out.println(m.matches());
		
		//문제..
		//아이디, 전화번호, 이메일 주소의 유효성을 검사하는 정규표현식을 만들어 주세요.
		
		String regexId = "[a-z0-9]{5,20}"; //특수기호
		String regexPhone = "010"+"[0-9]{4}"+"[0-9]{4}";
		String regexEmail = "[a-z0-9]{5,20}"+"@"+"[a-z]"+"."+"[a-z]"; //특수기호
		
		/*
		 * 아이디 : [a-z0-9_-]{5,20}
		 * 전화번호 : ^0\\d{1,3}-\\d{3,4}-\\d{4}
		 * 이메일주소 : [a-z0-9_-]{5,20}@[a-zA-Z]+\\.(?i))(com|net|org|([a-z]{2}\\.kr))$
		 * 
		 * 앞으로 프로젝트 하며 회원가입을 매번 해야할 건데,
		 * 공부를 해서 직접 만들면 좋겠지만 현실적으로 어려우므로
		 * 구글에서 괜찮은 정규표현식을 찾아 쓰도록.
		 */
		
		
	}

}











